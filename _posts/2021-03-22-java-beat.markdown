---
layout: post
title:  "비트 조작"
date:   2021-03-22
last_modified_at: 2021-03-22
categories: [JAVA]
tags: [JAVA]
---

- 왼쪽 시프트(<<)

x << y (x의 비트를 왼쪽으로 y칸 이동)

1111 << 2 = 111100

1111(15) -> 111100(60)  ,   x * 2^y

<br/>

- 오른쪽 시프트(>>)

x >> y (x의 비트를 왼쪽으로 y칸 이동)

1111 >> 2 = 11

1111(15) -> 11(3)   , x/2^y (나머지 제외 몫)

<br/>

- 비트의 보수(~)

0은1, 1은0으로 바꾼다. 32자리를 기준

~x

~0110 = 11111111111111111111111111111001

<br/>

- AND(&)

둘다 1인 경우 1을 반환 나머지는 0을 반환

1111 & 1000 = 1000

<br/>

- OR(|)

하나라도 1인 경우 1을 반환 둘다 0인 경우 0을 반환

1111 & 1000 = 1111

<br/>

- XOR(^)

서로 다른 경우 1을 반환 같은 경우 0을 반환

1111 & 1000 = 111


<br/>

출처

[https://myjamong.tistory.com/137](https://myjamong.tistory.com/137)
